{
  "name": "navigation-history",
  "displayName": "Navigation History",
  "description": "Enhance the experience of reading code by providing a comprehensive history of code navigation and a tree structure of calling hierarchies.",
  "version": "1.0.1",
  "publisher": "WaylongLeon",
  "icon": "media/icon.png",
  "repository": {
    "type": "git",
    "url": "https://github.com/pyeprog/navigation-history"
  },
  "engines": {
    "vscode": "^1.80.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onStartupFinished"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "views": {
      "explorer": [
        {
          "id": "navigationHistory",
          "name": "Navigation History"
        }
      ]
    },
    "configuration": {
      "title": "Navigation History",
      "properties": {
        "navigationHistory.sorting.defaultSortField": {
          "type": "string",
          "enum": ["time", "encore"],
          "default": "time", 
          "description": "The default sort field - 'time' for chronological order or 'encore' for visit count"
        },
        "navigationHistory.sorting.defaultSortOrder": {
          "type": "string",
          "enum": ["ascending", "descending"],
          "default": "descending",
          "description": "The default sort order for the navigation history"
        },
        "navigationHistory.delimiter.enableDelimiter": {
          "type": "boolean",
          "default": true,
          "description": "if true, the navigation history will show delimiter to enhance readability"
        },
        "navigationHistory.delimiter.delimiterString": {
          "type": "string",
          "default": "",
          "description": "the delimiter for each symbol tree in the view, only effective when enableDelimiter is true"
        },
        "navigationHistory.folding.defaultFolding": {
          "type": "boolean",
          "default": true,
          "description": "if true, the navigation history will only show limited number of symbols and fold the rest"
        },
        "navigationHistory.folding.unpinnedItemFoldingThreshold": {
          "type": "integer",
          "default": 20,
          "description": "the threshold of the symbol's checked count to be folded"
        },
        "navigationHistory.item.showFilenameInItemDescription": {
          "type": "boolean",
          "default": true,
          "description": "Show the filename in the item description"
        },
        "navigationHistory.item.showPositionInItemDescription": {
          "type": "boolean",
          "default": true,
          "description": "Show the position in the item description"
        },
        "navigationHistory.showStatusBarItem": {
          "type": "boolean",
          "default": true,
          "description": "Show the status bar item"
        },
        "navigationHistory.color.enableColorizing": {
          "type": "boolean",
          "default": true,
          "description": "if true, the navigation history will colorize the symbol based on the visit count, the bars are 20 and 60 visitings"
        },
        "navigationHistory.color.warmColorThreshold": {
          "type": "integer",
          "default": 20,
          "description": "the threshold of the symbol's visit count to be colored as warm color"
        },
        "navigationHistory.color.hotColorThreshold": {
          "type": "integer",
          "default": 60,
          "description": "the threshold of the symbol's visit count to be colored as hot color"
        }
      }
    },
    "commands": [
      {
        "command": "navigationHistory.cleanup",
        "title": "Cleanup",
        "icon": "$(clear-all)"
      },
      {
        "command": "navigationHistory.delete",
        "title": "Delete",
        "icon": "$(trash)"
      },
      {
        "command": "navigationHistory.deleteOtherTrees",
        "title": "Delete Others",
        "icon": "$(trash)"
      },
      {
        "command": "navigationHistory.pin",
        "title": "Pin",
        "icon": "$(pin)"
      },
      {
        "command": "navigationHistory.unpin",
        "title": "Unpin",
        "icon": "$(pinned)"
      },
      {
        "command": "navigationHistory.switchSortOrder",
        "title": "Switch Sort Order",
        "icon": "$(arrow-swap)"
      },
      {
        "command": "navigationHistory.switchSortField",
        "title": "Switch Sort Field",
        "icon": "$(sort-precedence)"
      },
      {
        "command": "navigationHistory.unfold",
        "title": "Unfold",
        "icon": "$(unfold)"
      },
      {
        "command": "navigationHistory.fold",
        "title": "Fold",
        "icon": "$(fold)"
      },
      {
        "command": "navigationHistory.unpinAll",
        "title": "Unpin All",
        "icon": "$(pinned)"
      }
    ],
    "menus": {
      "view/title": [
        {
          "command": "navigationHistory.cleanup",
          "when": "view == navigationHistory",
          "group": "navigation",
          "title": "Cleanup"
        },
        {
          "command": "navigationHistory.switchSortOrder",
          "when": "view == navigationHistory",
          "group": "navigation",
          "title": "Sort"
        },
        {
          "command": "navigationHistory.switchSortField",
          "when": "view == navigationHistory",
          "group": "navigation",
          "title": "Sort Field"
        },
        {
          "command": "navigationHistory.fold",
          "when": "view == navigationHistory",
          "title": "Fold"
        },
        {
          "command": "navigationHistory.unpinAll",
          "when": "view == navigationHistory",
          "title": "Unpin All"
        }
      ],
      "view/item/context": [
        {
          "command": "navigationHistory.pin",
          "when": "view == navigationHistory && viewItem == arrivalRoot",
          "group": "inline",
          "arguments": [
            {
              "$treeItem": true
            }
          ]
        },
        {
          "command": "navigationHistory.unpin",
          "when": "view == navigationHistory && viewItem == arrivalRootPinned",
          "group": "inline",
          "arguments": [
            {
              "$treeItem": true
            }
          ]
        },
        {
          "command": "navigationHistory.delete",
          "when": "view == navigationHistory && (viewItem == arrival || viewItem == arrivalRoot || viewItem == arrivalRootPinned)",
          "arguments": [
            {
              "$treeItem": true
            }
          ]
        },
        {
          "command": "navigationHistory.deleteOtherTrees",
          "when": "view == navigationHistory && (viewItem == arrival || viewItem == arrivalRoot || viewItem == arrivalRootPinned)",
          "arguments": [
            {
              "$treeItem": true
            }
          ]
        }
      ]
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "npm run check-types && npm run lint && node esbuild.js",
    "watch": "npm-run-all -p watch:*",
    "watch:esbuild": "node esbuild.js --watch",
    "watch:tsc": "tsc --noEmit --watch --project tsconfig.json",
    "package": "npm run check-types && npm run lint && node esbuild.js --production",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "check-types": "tsc --noEmit",
    "lint": "eslint src",
    "test": "vscode-test"
  },
  "devDependencies": {
    "@types/vscode": "^1.80.0",
    "@types/mocha": "^10.0.10",
    "@types/node": "20.x",
    "@typescript-eslint/eslint-plugin": "^8.17.0",
    "@typescript-eslint/parser": "^8.17.0",
    "eslint": "^9.16.0",
    "esbuild": "^0.24.0",
    "npm-run-all": "^4.1.5",
    "typescript": "^5.7.2",
    "@vscode/test-cli": "^0.0.10",
    "@vscode/test-electron": "^2.4.1"
  },
  "license": "MIT"
}
